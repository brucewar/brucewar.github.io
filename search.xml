<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[D3.js（完整的柱状图）]]></title>
      <url>http://brucewar.me/2016/10/25/D3-js-%E5%AE%8C%E6%95%B4%E7%9A%84%E6%9F%B1%E7%8A%B6%E5%9B%BE/</url>
      <content type="text"><![CDATA[首先，我们先看一下最终的柱状图效果展示。如下图所示，一个完整的柱状图需要包含三个部分：矩形、文字、坐标轴。 添加SVG画布12345678910111213141516// 画布大小var width = 400,height = 400;// 画布四个方向上的留白var margin = &#123; top: 20, right: 30, bottom: 20, left: 30&#125;;var chart = d3.select('.chart').attr('width', width).attr('height', height).append('g'); 定义比例尺12345// define x,y point rulevar x = d3.scale.ordinal().rangeRoundBands([0, width - margin.left - margin.right]);var y = d3.scale.linear().range([height - margin.top - margin.bottom, 0]); 添加矩形及文字123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354// 矩形之间的空白var barPadding = 4;/*** 这里用到了d3异步读取数据的接口csv* chart.csv的文件内容如下：* name,value* Locke,4* Reyes,8* Ford,15* Jarrah,16* Shephard,23* Kwon,42*/d3.csv('data/chart.csv', type, function(err, data)&#123; x.domain(data.map(function(d)&#123; return d.name; &#125;)); y.domain([0, d3.max(data, function(d)&#123; return d.value; &#125;)]); // append rect chart.selectAll('.bar') .data(data) .enter().append('rect') .attr('class', 'bar') .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')') .attr('x', function(d)&#123; return x(d.name) + barPadding / 2; &#125;) .attr('y', function(d)&#123; return y(d.value); &#125;) .attr('height', function(d)&#123; return height - margin.top - margin.bottom - y(d.value); &#125;) .attr('width', x.rangeBand() - barPadding); // append text chart.selectAll('.text') .data(data) .enter() .append('text') .attr('class', 'text') .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')') .attr('x', function(d)&#123; return x(d.name) + barPadding / 2; &#125;).attr('y', function(d)&#123; return y(d.value); &#125;).attr('dx', function()&#123; return (x.rangeBand() - barPadding) / 2; &#125;).attr('dy', 20) .text(function(d)&#123; return d.value; &#125;);&#125;);function type(d)&#123; d.value = +d.value; return d;&#125; 定义并添加坐标轴1234567891011121314151617181920212223242526// define axisvar xAxis = d3.svg.axis().scale(x).orient('bottom');var yAxis = d3.svg.axis().scale(y).orient('left').ticks(10); //显示的刻度值个数// append x axischart.append('g').attr('class', 'x axis').attr('transform', 'translate(' + margin.left + ', ' + (height - margin.bottom) + ')').call(xAxis);// append y axischart.append('g').attr('class', 'y axis').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')').call(yAxis).append('text').attr('transform', 'rotate(-90)').attr('y', 6).attr('dy', '.71em').style('text-anchor', 'end').text('value');]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[D3.js（入门篇）]]></title>
      <url>http://brucewar.me/2016/10/24/D3.js-%E5%85%A5%E9%97%A8%E7%AF%87/</url>
      <content type="text"><![CDATA[简介D3.js（后面简称D3，官方首页https://d3js.org/）是基于JavaScript开发的一套用于数据可视化工具，项目开源在GitHub，项目排名靠前。它提供了很多API，如DOM（Document Object Model）的一些操作，绘制图形等。截止本文发表时间，D3已更新到v4，v4在v3的基础上，有了很大的改变（因为v3只支持通过svg和dom构图，所以v4在v3的基础上增加了对Canvas的支持以及API的修改）,本文使用的版本为v3的API。 Hello World12345678910111213141516171819&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;D3.js Hello World&lt;/title&gt; &lt;script src="https://d3js.org/d3.v3.min.js"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;first text&lt;/p&gt; &lt;p&gt;second text&lt;/p&gt; &lt;p&gt;third text&lt;/p&gt; &lt;script&gt; var p = d3.select('body').selectAll('p') .attr('color', 'red') .attr('font-size', '72px') .text('brucewar'); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 上面代码展示了基本的DOM操作，有过jQuery开发经历的人会发现其语法和jQuery很相似，主要是以下两点： 支持元素选择器 链式语法结构 插入元素1234// 末尾插入p元素d3.select('body').append('p').text('append new prograph');// 在第一个p元素之前插入pd3.select('p').insert('p').text('insert new prograph'); 删除元素1d3.select('p').remove(); 数据绑定在D3中，选择器通常和数据绑定一起使用，这里的数据绑定的意思是将DOM元素与数据进行绑定，当需要依靠数据操作元素会非常方便。12345var arr = ['a', 'b', 'c'];p.data(arr).text(function(d, i)&#123; // d: 数据 i: 元素索引 return d;&#125;); 绘制简单的横向柱状图 添加svg画布 1234567var width = 300;var height = 300;var svg = d3.select('body').append('svg').attr('width'. width).attr('height', height); 绘制矩形 12345678910111213141516var data = [250, 210, 170, 130, 90]; // 表示矩形的宽度var rectHeight = 25;svg.selectAll('rect').data(data).enter() // 当元素个数不足数据个数时，自动补全.append('rect').attr('x', 20).attr('y', function(d, i)&#123; return i * rectHeight;&#125;).attr('width', function(d)&#123; return d;&#125;).attr('height', rectHeight - 2).attr('fill', 'steelblue'); 从上面的代码可以看出当data中的数据大于画布的宽度时，绘制的矩形会超出画布，所以需要引入比例尺（Scale）的概念。比例尺的概念类似数学中的一元二次函数，有x和y两个未知数，当x的值确定时，y的值也就确定了，x范围被称为定义域，y的范围为值域，对应于D3比例尺中的domain和range。D3为我们提供了很多比例尺，这里主要讲这里柱状图所要使用的线性比例尺。 123456var min = d3.min(data);var max = d3.max(data);var linear = d3.scale.linear().domain([min, max]).range([0, 300]); 绘制坐标轴 1234567891011//数据var dataset = [ 2.5 , 2.1 , 1.7 , 1.3 , 0.9 ];//定义比例尺var linear = d3.scale.linear() .domain([0, d3.max(dataset)]) .range([0, 250]);var axisX = d3.svg.axis() .scale(linear) //指定比例尺 .orient("bottom") //指定刻度的方向 .ticks(7); //指定刻度的数量 定义了坐标轴之后，只要在svg中添加一个分组元素，再将坐标轴的其他元素添加到分组即可。 1234svg.append('g').attr('class', 'axis').attr('transform', 'translate(20, 130)').call(axisX); 1234567891011/** 修改坐标轴样式 */.axis path,.axis line&#123; fill: none; stroke: black; shape-rendering: crispEdges;&#125;.axis text&#123; font-family: sans-serif; font-size: 11px;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[答利器上的六个问题]]></title>
      <url>http://brucewar.me/2016/09/29/%E7%AD%94%E5%88%A9%E5%99%A8%E4%B8%8A%E7%9A%84%E5%85%AD%E4%B8%AA%E9%97%AE%E9%A2%98/</url>
      <content type="text"><![CDATA[介绍一下你自己和所做的工作我叫王金龙，是一名初级（按照工作年限来说的话）Web前端开发，但是以开发经历来说，我至少应该算一名合格的前端攻城狮。目前在途牛旅游网工作（已经寻找到新的追求）。读书的时候，接触的东西比较少，心里所想唯有学习，所以也就没培养任何一样兴趣，偶尔会和同学一起踢踢球；工作的时候，才逐渐培养了一些兴趣爱好，如跳舞、唱歌等，跳舞是今年才培养起来的一个兴趣，但是因为工作的关系，基本没什么时间练舞，所以跳的非常非常一般。15年研究生毕业后，工作也有一年半了，而且公司是业务驱动开发，所以代码也写了不少，可是自身能力的提升却没看出来。 你都在使用哪些硬件 这款机械键盘是工作没多久之后买的。话说，当时看到同组的一位老程序员（简称斌哥，后来他们组从我们部门分出去啦）用的机械键盘，黑色键帽配上彩虹键帽，觉得很好看，所以一时冲动想买一把机械键盘。 做什么事都要过一下脑子 上面这句话，印象很深刻，因为我对机械键盘的知识一片空白，所以必须通过各方面的了解，首先从百度百科词条机械键盘学习了基本的知识，然后去问答网站（知乎）关注了话题机械键盘，发现此话题下，有很多问题是“程序员男朋友生日，想送机械键盘，有推荐的吗？”。额！！！被各种虐，心想为啥没有妹子送我。不过，还是有很多人推荐了不错的机械键盘。个人感觉很喜欢Filco圣手二代，但是迫于经济能力有限，最终还是买了一把国产的红轴，用起来真的很舒服（PS：好多同事试玩后都觉得不错）。 舞蹈配上音乐之后，才有了灵魂 如果一个舞者在没有背景乐的环境下舞动自己的身体，非专业观者可能会觉得看不懂，专业的人也只能从专业技巧上加以评价。有了音乐后，舞者会随着音乐的轻重缓急表达自己的情绪，这才有了舞魂。程序员写代码时的手指就如同这舞者，在键盘这个舞台上表演，配合音乐的节奏，程序便有了它的灵魂（PS：我写程序时听的歌单dance）。AKG的这个经典款的耳机是昊哥推荐的，性价比非常高（非广告）。 显示器没什么可以说的，做为Web前端开发，两个显示器是必备的，一个放IDE，一个放浏览器，对于开发效率有非常大的提升。 软件呢作为Linux的拥护者，必须向大家推荐Vim编辑器，我觉得它能让你脱离不必要的鼠标操作，大大提高工作效率，很惭愧，Vim新手阶段，用的不是很熟，只了解一些简单的编辑命令。顺带安利一款Chrome插件Vimium（用Vim命令操作浏览器环境）。 你最理想的工作环境是什么大桌子（圆弧型），两台显示器，一台笔记本，网络一定要好（自带翻墙，Youtube 1080P不卡顿），绿植围绕，周围坐着谦虚耐心的牛人，大家一起干着一件有意义（改变世界，哈哈，这个太大）的事。 你平时获得工作灵感的方式有哪些逛各种网站，知乎，简书等；玩各种流行的APP，微信，Instagram等，任何一个好的产品，自有它的独特的一面，我觉得作为前端开发，也需要有一些设计的想法，我开发过的项目中都曾借鉴过这些应用。 推荐一件生活中的利器给大家VPN，强烈推荐我用的这款，但是这里不方便贴链接，有需要的私信我。]]></content>
    </entry>

    
  
  
</search>
